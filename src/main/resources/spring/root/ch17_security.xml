<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 보안 필터 체인을 적용하지 않는 요청 경로 : 보안 필터 체인 설정보다 먼저 설정해야함
		spring security를 실행하지 않아도 되는 경로를 지정해주는 것
	 -->
	<security:http pattern="/resources/**" security="none" />

	<!-- 보안 필터 체인 설정 : 필터 정의 -->
	<security:http>
		<!-- 필터1:  인증 방식 설정: Form 인증 방식 
			1. (폼 인증 방식) 클라이언트가 post 방식으로 요청 http body 부분에 어떤 id, password 를 요청하는 방법
			2. 요청 헤더에 id, password 를 실어서 요청하는 방법
			
			login-page: 컨트롤러에 request mapping 경로
			login-processing-url : 컨트롤러에서 요청 경로 생성하면 안됨 -> 이건 스프링 시큐리티가 처리해주는 부분이라서!
			authentication-success-handler-ref: 인증이 성공했을 때 실행되는 객체
		-->
		<security:form-login 
			login-page="/ch17/loginForm"
			username-parameter="mid" 
			password-parameter="mpassword"
			login-processing-url="/login"
			authentication-success-handler-ref="ch17AuthenticationSuccessHandler"
			authentication-failure-handler-ref="ch17AuthenticationFailureHandler" />

		<!-- POST 방식으로 요청하는 로그아웃 -->
		<security:logout 
			logout-url="/logout"
			success-handler-ref="ch17LogoutSuccessHandler" />

		<!-- 사이트간 요청 위조 방지 비활성화 -->
		<!-- logout도 post 방식으로 요청(_csrf의 토큰을 전달해야함) -->
		<security:csrf 
			disabled="true" />

		<!-- 요청 URL 권한 설정 방법1 
			hasRole(~~) 을 갖고 있는 사람이 pattern="~~" url 만 요청할 수 있음
		-->
		<security:intercept-url pattern="/ch17/admin/**" access="hasRole('ROLE_ADMIN')"/> 
		<security:intercept-url pattern="/ch17/manager/**" access="hasRole('ROLE_MANAGER')"/>
		<!-- access="isAuthenticated()" 로그인 인증만 되면 볼 수 있게 설정 -->
		<security:intercept-url pattern="/ch17/user/**" access="isAuthenticated()"/>
		<!-- access="permitAll" 로그인 없이도 모두 다 볼 수 있게 설정-->
		<security:intercept-url pattern="/**" access="permitAll" />

		<!-- 
		권한 없음일 경우 보여줄 페이지 설정
		403: 권한없을 때 에러코드 
		error-page="/ch17/error403" -> 컨트롤러에 정의된 요청 경로
		/login, /logout 은 컨트롤러에서 정의하면 안됨 -> 스프링 시큐리트가 처리해주니까 컨트롤러에 요청 경로 지정 x 
		 -->
		<security:access-denied-handler error-page="/ch17/error403" />
	</security:http>

	<!-- 로그인 성공했을 때 실행하는 핸들러 -->
	<bean id="ch17AuthenticationSuccessHandler"
		  class="com.mycompany.springframework.security.Ch17AuthenticationSuccessHandler">
	</bean>
	
	<!-- 로그인 실패했을 때 실행하는 핸들러 -->
	<bean id="ch17AuthenticationFailureHandler"
	      class="com.mycompany.springframework.security.Ch17AuthenticationFailureHandler">
	</bean>
	
	<!-- 로그아웃 성공했을 때 실행하는 핸들러 -->
	<bean id="ch17LogoutSuccessHandler"
		  class="com.mycompany.springframework.security.Ch17LogoutSuccessHandler">
	</bean>

	<!-- 
	요청 URL 권한 설정 방법2 (추천!!)
	클래스 또는 메소드에 @Secured("ROLE_ADMIN")을 붙일 수 있도록 설정 
	
	<security:intercept-url pattern="/ch17/admin/**" access="hasRole('ROLE_ADMIN')"/> 
	이렇게 하나하나 다 정의해주면 귀찮아서 이 문제를 해결하기 위한 방법!! 
	-->
	<security:global-method-security secured-annotations="enabled" />


	<!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) -->
	<security:authentication-manager>
		<security:authentication-provider
			ref="daoAuthenticationProvider" />
	</security:authentication-manager>

	<!-- 인증 제공자 설정 -->
	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<!-- property 세터 주입 -->
		<property name="userDetailsService" ref="ch17UserDetailsService" />
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper" />
	</bean>

	<!-- 권한 계층 설정 -->
	<bean id="roleHierarchyAuthoritiesMapper"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<!-- 생성자 주입 -->
		<constructor-arg ref="roleHierarchyImpl" />
	</bean>
	<bean id="roleHierarchyImpl"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
				ROLE_ADMIN > ROLE_MANAGER
				ROLE_MANAGER > ROLE_USER
			</value>
		</property>
	</bean>

</beans>
